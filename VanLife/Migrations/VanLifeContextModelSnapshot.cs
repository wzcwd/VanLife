// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VanLife.Data;

#nullable disable

namespace VanLife.Migrations
{
    [DbContext(typeof(VanLifeContext))]
    partial class VanLifeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("VanLife.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "job"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "housing"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "pet"
                        });
                });

            modelBuilder.Entity("VanLife.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            CommentContent = "Is it still available? I need this job!",
                            CreatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 1,
                            UserId = 2
                        },
                        new
                        {
                            CommentId = 2,
                            CommentContent = "Is it still available? I like the house!",
                            CreatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 2,
                            UserId = 3
                        },
                        new
                        {
                            CommentId = 3,
                            CommentContent = "Cute dog !",
                            CreatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 3,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("VanLife.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ImageId");

                    b.HasIndex("PostId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            ImageId = 1,
                            ImageString = "image1.jpg",
                            PostId = 1
                        },
                        new
                        {
                            ImageId = 2,
                            ImageString = "image2.jpg",
                            PostId = 2
                        },
                        new
                        {
                            ImageId = 3,
                            ImageString = "image3.jpg",
                            PostId = 3
                        });
                });

            modelBuilder.Entity("VanLife.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PostId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            CategoryId = 1,
                            Content = "Join our team for an exciting part-time opportunity in Coquitlam! Embrace the freedom of van life while contributing to a dynamic, flexible work environment. This position is perfect for those looking to balance work and adventure. ",
                            CreatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 25m,
                            Title = "A part time position in Coquitlam ",
                            UpdatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            PostId = 2,
                            CategoryId = 2,
                            Content = "Looking for a new place to call home? Rent a cozy room in a beautiful house, perfect for individuals seeking a quiet and peaceful environment. Enjoy the convenience of a fully furnished space, including essential amenities such as high-speed internet, heating, and laundry facilities. The house is situated in a great location close to shops, parks, and transportation. Don't miss out on this opportunity to make this your next home!",
                            CreatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 1000m,
                            Title = "A room for rent",
                            UpdatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            PostId = 3,
                            CategoryId = 3,
                            Content = "“Meet the best dog in the world! A loyal companion, always by your side, ready for every adventure. Whether you’re hiking, camping, or simply lounging at home, this dog is the perfect friend for any occasion. With their playful spirit and loving nature, they’ll bring joy to your life. Join us in celebrating the best furry friend you could ever ask for!”",
                            CreatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The best dog in the world!",
                            UpdatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 4
                        });
                });

            modelBuilder.Entity("VanLife.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            IsAdmin = true,
                            Password = "Admin123",
                            UserName = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@example.com",
                            IsAdmin = false,
                            Password = "User123",
                            UserName = "user1"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user2@example.com",
                            IsAdmin = false,
                            Password = "User123",
                            UserName = "user2"
                        },
                        new
                        {
                            UserId = 4,
                            CreatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user3@example.com",
                            IsAdmin = false,
                            Password = "User123",
                            UserName = "user3"
                        },
                        new
                        {
                            UserId = 5,
                            CreatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user4@example.com",
                            IsAdmin = false,
                            Password = "User123",
                            UserName = "user4"
                        },
                        new
                        {
                            UserId = 6,
                            CreatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user5@example.com",
                            IsAdmin = false,
                            Password = "User123",
                            UserName = "user5"
                        },
                        new
                        {
                            UserId = 7,
                            CreatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user6@example.com",
                            IsAdmin = false,
                            Password = "User123",
                            UserName = "user6"
                        },
                        new
                        {
                            UserId = 8,
                            CreatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user7@example.com",
                            IsAdmin = false,
                            Password = "User123",
                            UserName = "user7"
                        },
                        new
                        {
                            UserId = 9,
                            CreatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user8@example.com",
                            IsAdmin = false,
                            Password = "User123",
                            UserName = "user8"
                        },
                        new
                        {
                            UserId = 10,
                            CreatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user9@example.com",
                            IsAdmin = false,
                            Password = "User123",
                            UserName = "user9"
                        });
                });

            modelBuilder.Entity("VanLife.Models.Comment", b =>
                {
                    b.HasOne("VanLife.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VanLife.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VanLife.Models.Image", b =>
                {
                    b.HasOne("VanLife.Models.Post", "Post")
                        .WithMany("Images")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("VanLife.Models.Post", b =>
                {
                    b.HasOne("VanLife.Models.Category", null)
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VanLife.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VanLife.Models.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("VanLife.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("VanLife.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
